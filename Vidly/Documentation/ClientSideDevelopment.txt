			/*	===	CLIENT SIDE DEVELOPMENT	===	*/
			/*	===	jQuery REFRESHER	===	*/

			/*	=== SELECTING ELEMENTS in jQuery ===	*/

- > Tag to get jq from CDN
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>

- > 1st Ensure DOM is ready before running jq code, so all elements are in existence,
	+Ensure separation from CSS / Html:
	$(document).ready(function() {
		// all jQuery code goes here
	});

- > Selecting elements in Jq
	$("div"); // selects all HTML div elements
	$("#myElement"); // selects one HTML element with ID "myElement"
	$(".myClass"); // selects HTML elements with class "myClass"
	$("p#myElement"); // selects paragraph elements with ID "myElement"
	$("ul li a.navigation"); // selects anchors with class "navigation" that are nested in list items

- > Selecting w/ other selectors (includin CSS3)
	$("p > a"); // selects anchors that are direct children of paragraphs
	$("input[type=text]"); // selects inputs that have specified type
	$("a:first"); // selects the first anchor on the page
	$("p:odd"); // selects all odd numbered paragraphs
	$("li:first-child"); // every list item that's first child in a list

- > Selecting w/ our own custom selectors:
	$(":animated"); // selects elements currently being animated
	$(":button"); // selects any button elements (inputs or buttons)
	$(":radio"); // selects radio buttons
	$(":checkbox"); // selects checkboxes
	$(":checked"); // selects selected checkboxes or radio buttons
	$(":header"); // selects header elements (h1, h2, h3, etc.)

			/*	=== MANIPULATING & ACCESSING CSS CLASS NAME ===	*/

- > We can add, remove & toggle CSS classes which comes in handy:
	$("div").addClass("content"); // adds class "content" to all <div> elements
	$("div").removeClass("content"); // removes class "content" from all <div> elements
	$("div").toggleClass("content"); // toggles the class "content" on all <div> elements 
									//(adds it if it doesn't exist, and removes it if it does)

- > Checking if element has a particular class and run code if it does
	if($("#myElement").hasClass("content")){
		//Run some code
	}

			/*	=== MANIPULATING CSS STYLES ===	*/

- > We can add styles to elements in cross-browser fashion
	$("p").css("width", "400px"); // adds a width to all paragraphs
	$("#myElement").css("color", "blue") // makes text color blue on element #myElement
	$("ul").css("border", "solid 1px #ccc") // adds a border to all lists


			/*	=== ADDING,REMOVING & APPENDING ELEMENTS & CONTENT ===	*/
- > Get HTML of any elements
	var myElementHtml = $("#myElement").html(); //Includes any text

- > If we only want text w/o element
	var myElement = $("#myElement").text();

- > In parentheses we can *REPLACE* content :
	var myElementHtml = $("#myElement").html("<p>Some text</p>");
	var myElement = $("#myElement").text("Just replace other text");

- > Same as above but APPEND:
	$("#myElement").append("<p>Some text</p>");
	$("p").append("<p>Append this text to all paragraphs</p>")

- > We also have similar commands:
	appendTo(), 
	prepend(), 
	prependTo(), 
	before(), 
	insertBefore(), 
	after(), 
	insertAfter()

			/*	=== DEALING W/ EVENTS ===	*/
- > Specific event handlers are specified using the following code:
	$('a').click(function(){
		//do something here *when* ANY ANCHOR is clicked
	});
- > Some other common events besides click(function())
	blur, 
	focus, 
	hover, 
	keydown, 
	load, 
	mousemove, 
	resize, 
	scroll, 
	submit, 
	select

			/*	=== SHOWING & HIDING ELEMENTS ===	*/

- > Do sth once when element is hidden
	$("#myElement").hide("slow", function(){
	});

- > -||- shown
	$("#myElement").show("fast", function(){
	}); 

- > -||- shown/hidden

	$("#myElement").toggle(1000, function(){
	}); 

- > "Slow","Fast", number-of-miliseconds indicates speed of showing/hiding 
- > We can also use following events in this manner
	fadeOut
	fadeIn
- > To eg Fade element only partially:
	$("#myElement").fadeIn(1000,0.4, function(){
		//Do something when fade is finished
	}); 
	>> Second argument represents oppacity

		/*	=== jQ ANIMATIONS AND EFFECTS ===	*/

- > Commands:
	slideDown
	slideUp
	slideToggle
	>> Arguments are same as for showing/hiding elements

- > Animate element w/ specifying CSS style it should change to
	$("#myElment").animate({
		opacity: .3,
		width: "500px",
		height: "700px"},2000,function(){
			//Optionally do something after animation completes
		}) 
			
			
			/*	===	CALLING AN API USING jQ	===	*/

- > 1st we give table id customers.

- > Index in Customers. New th for delete.
	td w/ button; classes: btn-link, js-delete ;text: Delete
	//We prefixed class w/ js to know that it's exclusively for js

- > Now JQ to handle click event
	>> Bottom of file
	@section scripts
	{
		<script>
			$(document).ready(function(){
				//All jq code goes here	  
				
			});
		</script>
	}

- > Now select a button
	$("#customers .js-delete").on("click",function(){
		
	});

- > First let's test simple confirmation box:
	confirm("Are you sure you want to delete this customer.")

- >We wrap it in if block - ie if confirm function returns true.
- >We want to call an API usin jqAjax
- > first we add this attribute to our button: data-customer-id ="@customer.Id"
	$.ajax({
		url: "/api/customers/"+$(this)attr("data-customer-id"),
		method: "DELETE",
		//Callback when call is successfull
		success: function(){
			console.log("Success");
		}
	})
- > Now we need to remove table row that includes this customer.
	
	>> To use button it's best to define it after click event at top of callback
	function:
		var button = $(this);//Now we get ref to button that's just been pressed

	>> We can start from reference to our button and navigate up DOM to tr
	>> in success function
		button.parents("tr").remove();
		+we replace previous $(this) reference to button with button

		/*	===	MORE BEAUTYFUL BOXES	===	*/
		/*	===	BootBox jQ plugin		===	*/

- > Bootbox is abstraction over BS that provides simple functions
to provide various window boxes.
- > PM> install-package bootbox -version:4.3.0
- > Add ref to bootbox.js in our bundle:
	>>  App_Start - BundleConfig:
	in bootstrap bundle we add additional js
	>> w/ bundles we automatically get minification when we 
	compile in release
- > In index.cshtml we replace our if(confirm) w/
	>> bootbox.confirm("Are you sure.....")
	>> Unlike native js - this method doesn't return a boolean
	but takes a callback function so we pass it as 2nd argument
	with result parameter.
	if(result){
		//copy past our ajax call
	}

		/*	===	OPTIMIZING JQ CODE	===	*/

 $('#customers .js-delete').on("click", function ()
 - > We're inefficiently handling click events:
	>> For each customer we'll have delete button and fore each button
	>> we have separate HANDLER function - more customers more memory we'll consume
	- > It's better if we change selector to only customers table and then
	>> FILTER as second argument of "on" method
	this way we'll have only 1 click handler for all delete buttons
	>> Why? Because our selector is bound to only one element "#customers"
	>> And in this one handler we have a filter.

		/*	===	DATA TABLES PLUGIN	===	*/

- > Plugin adds pagination, sorting and filtering.
- > PM> install-package jquery.datatables -version:1.10.11
- > We'll consolidate 2 bundles we use on every page(jq,bs) into single
one "lib" that represents 3rd party libraries
	>> in _Layout.cshtml:
	we delete two previous @Scripts.Render into single one 
	@Scripts.Render("~/bundles/lib")
	>> in bundleconfig
	Rename jq bundle to "lib"+ we bring in all script from bs bundle &
	delete bs bundle
	>> in Lib bundle we add 2 DataTables scripts we'll use - there are plenty of them
	~/scripts/datatables/jquery.datatables.js (core script)
						/datatables.bootstrap.js (integrates dt w/ bs)
	+We need to add DT CSS to our css bundle
	~/content/datatables/css/datatables.bootstrap.css (makes DT look like bootstrap tables)
- > In Index.cshtml
	> $(document).ready(function(){...})
	>> //Get ref to customers table and call DataTable func on it
	$("#customers").DataTable();

- > There is one downside to it for big pages with this implementation:
	We render view on server & return HTML to client
	DTplugin has to extract all this info from HTML and construct
	it's own list of customers
- > It's faster to give raw data from the server and let DT generate
HTML on the client (ie we return JSON instead of Markup)

		/*	===	DATA TABLES W/ AJAX SOURCE	===	*/

- > We delete foreach but leave table structure
- > In index method of CustomerController we return just an empty view
	we do not need to fetch customers from DB anymore

- > Since we don't have a model we also get rid of our if...else block
- > When we call table.DataTable({
	we need to provide configuration object here
});

-> we need properties:
	1. ajax: //which in turn is also a prop w/ 2 objects
	{
		url: "/api/customers/"
		dataSrc: ""
	},
	>> Why is datSrc empty?
	>> Well in case we had json obj like this:
	{
		count: 10,
		customers: [
			{...},
			{...},
		...
		]
	}
		>>> We'd need to provide dataSrc as "Customers"
	
	>> In our case, response is array of objects ie source of data
	2.columns: [
		//For each column we supply an object and it it 
		//various properties in particular column

		//Argument list contains different arguments to support
		//rendering
		
		//If we want to have link not plain text we
		//must supply custom rendering function	


		{
			data: "name",//Where is data for this column?	
			render: function(data, type, customer){												
				return "<a href="'/customers/edit'" + customer.id"'>"+customer.name +"</a>";
			}			 
		},
		{
			data: "name" // here we'll actually need MembershipType.Name
		},
		{
			data: "id",
			render: function(data){
				return"<button class='btn btn-link js-delete' data-customer-id=" +data + ">Delete</button>";
			}
		}
		{
		
		}
	]

			/*	===	RETURNING HIEARARHICAL DATA	===	*/

- > We're missing membership data right now, we have only membership ID
- > CustomersController in api:
- > In GetCustomers() we need to EAGER LOAD the customers w/ memberhsiptype
	using System.Data.Entity and we use Include w/ lambda
- > In CustomerDto though we have no membership type thus: 
- > We need to create MembershipTypeDto (we don't want to couple
our Dtos with Domain Object)
- > Dtos -> MembershipTypeDto
	>> We add only Id and Name
- > In CustomerDto:
	public MembershipTypeDto MembershipType{get;set;}
- > Last we insert it into automapper
- > In index - we change 2nd property we left before as name to
membershipType.membershipName


			/*	===	DATA TABLE REMOVING RECORDS	===	*/

- > Right now we have a bug that if we delete a row it will stay there (not
in Db but on site).
- > Reason is that we're just removing tr from DOM:
	success: function () {
			button.parents("tr").remove();
			}
- > But DataTable keeps a list of customers internally
- > We should remove customer from internal list of DataTable and
after that we tell DataTable to redraw itself
- > 1st we need a ref to DT (when we call DT function we get result
and store it in variable table)
- > Back in success function:
	table.row(reference to the tr - ie button.parents("tr") then we 
	call remove method on it; finally we call draw() method on it to 
	redraw the table

			/*	===	DATA TABLE DISCUSSION POINTS	===	*/

- > Right now we're calling customers in bulk which works fine up to about
1000 objects of our size.
- > If we send a lot of objects we're better of doing pagination, sorting
and searching on server
	>>	In DataTables you'd then have to enable server side processing
- > We have also poor-ish separation of concerns in our JS code...


			/*	===	SPAs	===	*/

- > w/ SPAs we'd render entire site on client, ie we wouldn't be using any
razor views
- > We only send ajax requests to api and only update part of the page so 
we essentially have one page which gets updated constantly
- > Essentially we have bunch of restful apis on server and on client
we use Angular, Backbone or Ember

			/*	===	EXERCISE	===	*/

- > Add data tables to our movies list
	> Implement deleting movie using bootbox and ajax
