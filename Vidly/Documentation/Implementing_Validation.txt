			/*	===		INTRODUCTION	===	*/

- > In customer ctrl Save action we have Customer as parameter
- > MVC when it populates it using request data it checks to see if 
this object is valid based on DATA ANNOTATIONS
	>> We can use ModelState prop to get info on validation data
	ModelState.IsValid() is bool, so we can change app flow:
	if(!ModelState.IsValid()){
		var viewModel = new CustomerFormViewModel(){
			Customer = customer,
			MembershipTypes = _context.MembershipTypes.ToList()
		}
		return View("CustomerForm",ViewModel)
	}
		>>> Ergo we return same view w/ same (invalid) data (which has to be VM! as 
		was defined) for user to correct
- > To add Validation there are 3 steps to follow
	>> Add data annotations on entities
	>> Validate ModelState to change flow of the program
	(if not valid return the same view)
	>> Add VALIDATION MESSAGES to our FORM
		>>> Add placeholder for validation messages next to each
		field that requires validation
		Eg Customer.Name is req and is limited w/ 255 chars 
		Under Label & TB
		we add @Html.ValidationMessageFor(m => m.Customer.Name)


		/*	===		STYLING VALIDATION ERRORS	===	*/

- >We check error message in browser inspector and see we have
a span w/class field-validation-error
+An input has a class of input-validation-error
- > Site.css
.field-validation-error{
	color: red;
}
.input-validation-error{
	border: 2px solid red;	
}
+We implement validation for MembershipTypeId
- Even though MembershipTypeId is not required it's IMPLICITLY
REQUIRED because it's type is byte!
- ***TIP*** > to force view NOT TO USE CAHCED styles
refresh it w/ CTRL+F5

			/*	===		OTHER DATA ANNOTATIONS	===	*/

- > Besides Required & StringLength()
	>> Range(min,max)
	>> [Compare("OtherProperty")] //eg for passwords
	>> [Phone]
	>> [EmailAddress]
	>> [Url]
	>> [RegularExpression("...")]
- > All have default validation message
	>> To override it we add Error message property in DA eg:
	[Required(ErrorMessage =".......")]

		/*	===		CUSTOM VALIDATION	===	*/

- > Say that for Memberships Customer should be at leat
18yo (other than for pay as you go)
- > Models - new class - Min18YearsIfAMember
- > It derives from ValidationAttribute
Here we OVERRIDE IsValid() method
	>> This method has 2 overloads, it's best to go w/
	one that takes Object & Validation context because it gives us access to
	other properties of our model.
	>> We 1st apply it to Birthdate which is a property we'll validate
	[Min18YearsIfAMember]
	>> In Attribute:
		>>> 1st we check selected membership type:
		var customer = (Customer)ValidationContext.ObjectInstance;
		//ValidationContext.ObjectInstance gives access to customer
		//But we need to cast it as Customer !
		>> We check Membership:
		if(customer.MembershipTypeId == 1 || customer.MembershipTypeId == 0 ){
		//0 if user doesn't choose memberhsip type
			return ValidationResult.Success;
		}
		if(customer.Birthday == null){
			//Instantiating new ValidationResult indicates validation failed
			return new ValidationResult("Birthday is required");
		}
		//Birthdate has value because it's nullable
		var age = DateTime.Today.Year - customer.Birthdate.Value.Year;

		return(age >= 18 : ValidationResult.Success : new ValidationResult("Customer
		should be at leat 18 yo to go on a membership"))
	>> We add validation message placeholder to view under birthdate field


		/*	===		REFACTORING MAGIC NUMBERS	===	*/

- > MN hurt maintenabilty! (eg customer.MembershipTypeId==1)
	>> Above membership types are essentially reference data
	>> We have to define those types in our domain model to make code
	more mainteinable
- > Models - Membership Type:
//Let's make readonly fields according to DB 
public static readonly byte Unknown = 0;
PayAsYouGo = 1;
- > in Custom Validation we then check (customer.MembershipTypeId == Unknown)...
- > We only define fields we need
- > We can also use enum, but then we have to cast them on use

			/*	===		VALIDATION SUMMARY	===	*/

- > We can display validation summary at top of form by adding
	@Html.ValidationSummary()
	>> Problem: it says that Id is required (because byte)
	>> We have a hidden field for id but it's null atm
	>> In AM New we have to initialize Customer.id in ViewModel
		Customer = new Customer(); // So it initializes to 0 and has a value!!!
	>> If we don't want to list errors but just display a message we pass
	true to ValidationSummary (ie exclude property errors)
	And then we pass "Error message" (please fix errors)
- > It also makes sense that we put birthday after Membership Type since it's not 
required per se, only if membership type has a certain value


			/*	===		VALIDATION SUMMARY	===	*/