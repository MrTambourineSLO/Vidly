			/*	===	AUTHENTICATION & AUTHORIZATION	===	*/
					/*	===	THE PROBLEM	===	*/


- > This app is designed to run in store:
	>> Person @ counter will use it to record:
	customers,rentals, returns...
	>> All above should be restricted to logged-in user
- > Additionally we want to add a role "Store Manager" to 
limit CUD movies/customers

			/*	===	AUTHENTICATION OPTIONS	===	*/

- > When we create project in "Change authentication" we have 
4 different options:
	>> No authentication
	>> Individual User Accounts
		>>> Most common - we'll examine this one.
	>> Organizational Accounts
		>>> For Active Directory users
	>> Windows Authentication
		>>> Intranet authentication which automatically
			logs in user in app when they login in Windows

- > We have Register&Login at top right of our app by default
	>> We can register automatically
	>> We'll examine this options in detail and see how we can
	customize them based on our needs.
			
			/*	===	ASP.NET IDENTITY	===	*/

- > Registration feature is part of ASP.NET IDENTITY
- > In our references we have 3 assemblies in Microsoft.AspNet.Identity:
	>> Core
	>> EF
	>> Owin
- > ASNI has several DOMAIN CLASSES (eg IndentityUse, Role...) and 
several APIs/Services to work with them(UserManager,RoleManager,
SignInManager...)
	>> Both of the above internally talk to another group of classes in
	PERSISTENCE layer (eg UserStore, RoleStore)
		>>> ASPI provides implementation of these persistence layer using
		EF and SQL but we can also plugin our own implementation of 
		PERSISTENCE STORE like NoSQL DB

- > In our initial migration we got plenty of tables in migration
(AspNetUserRoles...) - these are based on DOMAIN MODEL of ASNI framework
	>> We can see them in Models>IdentityModels.cs
	DbContext there derives from IdentityDbContext and ApplicationUser
	derives from IdentityUser
	>> Both those are part of ASNI
- > In Controllers>AccountController.cs
	>> Nr of actions - register, login, logout...
	>> In Register method we have async functionallity to automatically
	login a user - we can comment it in and comment out below code to
	wait for user confirmation mail.

			/*	===	RESTRICTING ACCESS	===	*/

- > We have attribute (filter) [Authorize]
	>> Applied to Action & Called by MVC FW before & after action ||
	result are executed.
- > Let's apply it to index of customers, we're redirected to Login
	In URL - we have query string "ReturnURL" which says where we'll
	be redirected once we login
	(%2F is '/' in query string)
- > We can also apply this filter on Controller || Globaly
	>> Globaly App_Start - FilterConfig.cs 
	method filters.Add() is where we put filters
	ergo: filters.add(new AuthorizeAttribute());
	>> Say we want to make homepage accessible to non registered users:
		>>> HomeC. [AllowAnonymous]


				/*	===	SEEDING USERS & ROLES	===	*/


- > Movie management ops will be restricted to StoreManagers.
- > 1st we create a role 
	>> First we register a GUEST USER (eg guest@vidly.com)
	>> IN VS - Controllers/ AccountController.cs - Register method:
		>>> Just for demo we'll assign every new user to StoreManager role
		>>> if(result.Succeeded) // if user is successfully created:
			//Temp Code:
			//We said that to work w ASPI we use Manager classes (in Api/Service)
			//1st we create a ROLE store (which lays in lower layer)
			//Role store is T class where we specify the role in app
			//We don't have our own specific role class so we use one
			//that comes w/ asp Identity
			//In CTOR we pass new ApplicationDbContext()
			var roleStore = new RoleStore<IdentityRole>(new ApplicationDbContext());
			//Now that we have store we create a role manager
			var roleManager = new RoleManager<IdentityRole>(roleStore);
			//To create a role we call CreateAsync on roleManager:
			//because we set generic param to identityRole we have to pass
			//an instance in CTOR
			//Name of role should be descriptive of permissions
			//Because it's an async method we need to await it
			await roleManager.CreateAsync(new IdentityRole("CanManageMovies"));
			//Now we assign this new user to our new role
			await UserManager.AddToRoleAsync(user.Id,"CanManageMovies");
		>>> Now we register a new user (admin@vidly.com)
		>>> After registration we *IMMEDIATELY* remove those 4 lines
	>> We want these 2 users an our new role to be deployed w/ an application
		>>> We do that w/ Code 1st Migration:
		>>> PM> add-migration SeedUsers
		>>> In empty migration Up() we'll use SQL to add those in DB
		>>> Quick way: Solution Explorer, Show all, App_Data, .mdf,
		AspNetUsers - Show Data - ShiftSelect both - RCLICK - Script
		we can Copy/Paste all in singe Sql(@"") (w/ @)
		>>> We do same for AspNetRoles % AspNetUserRoles
		>>> Now we delete all records from db (AspNetRole & AspNetUsers) and run this migration to
		populate it again (update-database)
		>>> If we run this migration on another (testin || production DB)
		we'll have exact same setup
		>>> That's PROPER WAY to SEED our DB w/ USERS & ROLES
		>>> The way they show you w/ SEED method of Configuration class
		-> It's risky because we need to switch connection strings
			
			/*	===	SEEDING USERS & ROLES	===	*/

- > One option: we could hide elements depending on privileges - if you have
complex view you'll have probably too many if...else statements so it will
be better to create entierly new view for users w/ less privileges
- > Movies:
	>> Hide new movie button
	>> Change linked Movie name to redirect to details instead of edit page
	>> Hide 3rd column (delete)
	>> Since we're using Jquery to render tables so this would be a mess
	>> We'll create a new view for staff.
	>> Views- mOvies - index - duplicate to ReadOnlyList and for consistency
	rename Index to List
	>> ROL.cshtml 
		>>> Delete AL for new button
		>>> Delete 3rd column 
		>>> 1st column in Jq delete 1st render function
		>>> 3rd coumn || delete code that handles delete
	>> Controllers - movies controller we use User property of controller
		Which gives us access to the current user
	if(User.IsInRole("CanManageMovies")) - return List View
	Otherwise ROL
	>> That's only half, because we can stll get to /New view manually
	>> We can also use Postman to CRUD db 
	>> In Movies controller we assign appropriate [Authorize(Roles = "CanManageMovies,...,...")] to AR
	>> That applies to actions of our movie api as well(exercise)
	>> We need to fix adding magic string "CanManageMovies"
		>>> Models- Class RoleName.cs - static class
			->>> public const string CanManageMovies = "CanManageMovies";
			-This way we only modify name in one place


			/*	===	ADDING PROFILE DATA	===	*/

- > Let's introduce a new filed in Register (ie Driving License)
- > We always start w/ the domain - Models > IdentityModels - at top of class (ApplicationUser)
new prop - string DrivingLicense & Decorate it w/ [Required] & [StringLength(255)]
- > Now we changed domain so we add a migration:
"AddDrivingLicenseToAppUser"
Update-Db
	>> What will happen to existing Users?
	EF will set them to "" &! null
- > Domain Model and Persistance Store(DB) are now updated
- > Now View: "Register.cshtml"
	>> Copy& paste before the submit button one of other form.groups
	Change Email to DrivingLicense - but we need to add it in RegisterVM
	first
	>> prop string DrivingLicense + [Required] [Display(Name="Driving License")]
	>> Before we used Required in Identity Models to override Conventions of EF
	while migrating DB, here we're working on VM.
	>> When form is posted we need to get this license & put it in domain object
	>> AccountController - Register (Action)
		When initializing application User we inititalize Driving License as well


			/*	===	REGISTERING W/ SOCIAL MEDIA	===	*/
					/*	===		OAuth	===	*/

- > External authentication providers(Ms,FB,Google&c) use Authentication provider
called OAuth (Open Authorisation)
- > How it works:
	>> 1st We need to register our app w/ FB, FB will give us API key & Secret (kinda
	like UserName & Password)
	>> When one clicks on FB login on our site, we'll redirect him to FB & Use API key
	& Secret - to prevent someone sniffing those details we use HTTPS
	>> Because we're registered w/ FB, FB will know about us and will send us
	{authorization token} + redirect user back
		>>> Token tells that FB could successfully authenticate this user
	>> When we get back this token we send it back to FB along with key & secret
	becasue Hacker could send random AuthToken to us so we verify it really came from FB
		>>> After FB confirms, we get an {access token}
		>>> w/ Access Token we can access some parts of the user's profile
	>> All those complexities already exist in ASP.NET indentity
- > In practice:
	2 steps we need to follow:
	* Enable SSL
		Project - F4 - SSL Enabled = True - COPY
		Project - PROPERTIES - WEB - Project url: PASTE
		Run - Install Certificate when prompted
		PROBLEM:
			Our old http site is still accessible
			App_Start - FilterConfig - filters.Add(new RequireHttpsAttribute());
	* Register our app w/ FB
		Developers.facebook.com
		MyApps -Add New - WWW -Vidly - Create New FB App ID - SiteURL - input it w/ Localhost
		Next - Skip TO Developer Dashbord
		Copy App ID & App Secret
	* In VS: startupAuth.cs
		Uncoment UseFacebookAuthentication and copy paste id and secret
		In FB register we need to add Driving License as well:
		*ExternalLoginConfirmation.cshtml - add DrivingLicense field +
		Add it to ExternalLoginConfirmationViewModel
		Then we go to action and add it to creation of new application user

			/*	===	EXERCISE	===	*/
- > Add new field called PHONE required, limited to 15 chars

- > Limit movie management operations to our store manager
[Don't forget the API controller as well]

- > Take out VM classes we work w/ as part of this exercise
(External login .... VM) and put them in separate file, same for Identity Models