			/*	===		ENTITY FRAMEWORK	===*/

-ORM> middleman between Objects and Relational DB
-Before we had to manually open a connection to a DB, executing command, reading data
and closing a connection
-EF provides class called *DbContext* (gateway to our DB)
	Each *DbContext* has 1..* DbSets
	DbSets represent TABLES in our DB
-We use LINQ to Query DBSet
	EF translates Linq queries to SQL queries at runtime
-TWO WORKFLOWS:
	DB 1st
	Code 1st

			/*	===		DB 1st vs. CODE 1st	===*/


Traditionally - create DB and have EF create DOMAIN CLASSES (DB 1st)
Or we start w/ Domain Classes -> EF -> DB
PROS of CODE 1st:
	*Increased productivity - much faster to write code
	(ie many additional clicks when using table designers)
	*We don't have to manually create migration scipts.
	*We have FULL VERSIONING of DB (ie Migrations)
	*Integration TESTS are super simple (3 lines of code)
	*Can also be used on legacy DBs

			/*	===		CODE-FIRST MIGRATIONS	===*/


In CF we start w/ a CODE -> any time we modify our Domain Model we create a MIGRATION
and then RUN IT on a DB.
In PMC(ps commands are not case sensitive) 
	- > 1st time we run them we 1st have to enable them:s
		enable-migrations
	- > In SOLUTION EXPLORER we have a new Folder "Migrations"
		(all our migrations will be stored here)
	- > Create our 1st Migration:
		PM> add-migration InitialModel
		(we have to add it, because it's our first and then name it however we 
		want - since it's first we name it InitialModel) 
	- > Under MIGRATIONS we now have a new C# class
		>> In this class we see the creation of ASP.NET IDENTITY tables
			which our project uses for Authorization & Authentication
			(We can see them under Models-IdentityModels.cs)
		>> If we look @ IdentityModels.cs we see:
			 public class ApplicationDbContext : IdentityDbContext<ApplicationUser>
			 ...
			 >>> Derives from IdentityDbContext-> this is DBContext (ie gateway to
			 our DB) - it's a part of ASP.NET Identity Framework
			 >>> When we executed a migration EF looked at our DBContext and discovered
			 DBSets in IdentityDbContext which reference classes like:
				User, Role &c
		>> In 201606270738149_InitialModel.cs we don't see any references to
			our Domain Classes - because they're not REFERENCED by our DBCONTEXT
	- > Let's add our customer table to DB
		>> in IdentityModels in ApplicationDbContext we add prop DBSet<Customer> Customers
			>>>	This represents customers table in our DB
		>> Now PM> add-migration InitialModel -force
			(force because it already exists)
		>> In our Migration class we see command to add table customers
		>> PM> update-database
		>> Solution Exprlorere -> Show all Files -> App_Data we have DB File
			>>> BTW: Here we can also see table _MigrationHistory w/ all migrations

			/*	===		CHANGING THE MODEL	===*/

- > In Customer.cs in Models we'll add more complexity
	>> We'll add IsSubscribedToNewsLetter and MembershipType
	>> MembershipType business rules:
		>>> Membership type: Pay as you go
		>>> Sign Up Fee: Free
		>>> Discount: 0%
		-----------------
		>>> Membership type: Monthly
		>>> Sign Up Fee: 30$
		>>> Discount: 10%
		-----------------
		>>> Membership type: Quarterly
		>>> Sign Up Fee: 90$
		>>> Discount: 15%
		-----------------
		>>> Membership type: Annual
		>>> Sign Up Fee: 300$
		>>> Discount: 20%
	>> To model this we need a new class MembershipType with
		appropriate properties as seen above
		>>> Each customer should have only 1 MembershipType
	>> To make this changes we should aim for SMALL MIGRATIONS instead
		of doing it all in one big go.
	>> With BigBang migration we increase a risk of things going wrong
		(one of the reasons many devs who try CF workflow fail)
		>>> We should treat those migrations like git commits
- > In Customers.cs we add new bool prop IsSubscibedToNewsLetter
	>> Add migration w/ name AddIsSubscribedToCustomer
	>> Update DB
- > Add new class MembershipType
	>> Props:
		>>> short SignupFees
		>>> byte DurationInMonths (because top value is 12(months))
		>>> byte Percentage (between 0-100)
	>> In EF every entity must have a key (PK in DB)
		>>> Name convention: Either "id" or "nameOfTheType+Id"
			>>> Thus prop byte Id (we have only few membership types)
- > Now we need to associate customer w/ membership type
	>> Customer - new prop MembershipType - MembershipType (this is so called
	navigation property - it allows us to navigate from one type to another)
	>> Sometimes for optimization we don't want to load entire membershiptype
		but just - say - FK 
		>>> new prop - byte MembershipTypeId (EF recognizes this convention
		and treats it as a FK)
- > Add migration (AddMembershipType)
- > Update DB

			/*	===		SEEDING THE DATABASE	===*/

We need to populate MembershipTypes table w/ some records
Our development, production and testing DB should ALL HAVE exact same types!
- > While using Code-First we SHOULD NOT TOUCH Db at all!
	All should go through migration
- > PM> add-migration PopulateMembershipTypes
	>> In migrations we now have EMPTY migration
		>>> in Up() we can call
			Sql("INSERT INTO MembershipTypes (Id,SignupFee, DurationInMonths, DiscountRate)
			VALUES (1,0,0,0")
			Sql("INSERT INTO MembershipTypes (Id,SignupFee, DurationInMonths, DiscountRate)
			VALUES (2,30,1,10")
			Sql("INSERT INTO MembershipTypes (Id,SignupFee, DurationInMonths, DiscountRate)
			VALUES (3,90,3,15")
			Sql("INSERT INTO MembershipTypes (Id,SignupFee, DurationInMonths, DiscountRate)
			VALUES (4,300,12,20")
		>>> PM> update-database

			/*	===		OVERRIDING CONVENTIONS	===*/

In our Customers table Name is nullable w/ Nvarchar of max
- > Overriding this conventions:
	>>	Models - above Name prop attribute [Required] - ie Not Nullable
		>>> [StringLength(255)] -max of 255 chars 
- > This is called data annotations
- > We change DM - ego in PM> add DB-Migration (applyanotationstocustomername)
- > update DB

			/*	===		QUERYING OBJECTS W/ EF	===*/

In CustomersController we want to get rid of hardcoded List<Customer> and get it from a DB
- > We need a DBContext to access the db
	>> Declare a private field ApplicationDbContext _context;
	>> We init it in CTOR
	ctor CustomerController(){
		_context = new ApplicationDbContext();
	}
	>> This DBC is disposable obj, so we need to dispose it:
		>>> We do it by overriding base controllers Dispose class
			_context.Dispose();
		(Later we'll handle this w/ dependency injection)
	>> In index action insted of calling GetCustomers()
		We'll init customers by calling _context.Customers;
		This Customers property is a DbSet defined in our DbContext
    >> We need to know about DEFERRED EXECUTION:
		>>> when we call _context.Customer; EF will not query the DB
		just yet, rather it will do it for example in the VIEW when WE ITERATE over it.
		>>> We can also IMMEDIATELY exec the query by calling it's ToList() method
			_context.Customers.ToList();
	>> In Details action we also replace GetCustomers() w/ _context.Customers
		>>> Because we call SingleOrDefault on it, execution WILL NOT BE DEFERRED
	>> We get rid of GetCustomers()
	>> We populate Db for Customers table directly in DB
		(as opposed to previous lecture we can do that, because it's not reference data
		Here we're working with "development" DB, so customers don't matter
		on Deployment DB we only deploy the migrations. This arbtraray customer
		data won't be deployed to the DB on Deployment  )

			/*	===		EAGER LOADING	===*/
-> If we want to display for example what Discount Rate a Customer has on a 
view:
	<td>@customer.MembershipType.DiscountRate</td>
	>> We will get an null reference exception
		>>> By default EF only loads CUSTOMER object not their RELATED OBJECTS
	>> To solve this:
		>>> We need to perform eager loading
		>>>	In Index action when referencing Customers we use .Include(c => c.MembershipType)
			*This is defined in System.Data.Entity.

			/*	===		PMC>	===*/

Custom shortcut for PM> Alt // 
			
			/*	===		EXERCISE 1	===*/
1) In list of customers replace Discount rate from percentage to Words (Pay as You go, Monthly...)
	-We need to add Name to membership type - 1st in domain class 
	-We need to add another migration to update existing records in DB(SQL method)
	 (Insted of INSERT we'll use UPDATE)
-> SOLUTION:
	>> We update MembershipType model with prop string MembershipName
	>> We add a migration & Update DB
	>> We create new migration to update our new column
	>> in Up() method we write
			Sql("UPDATE MembershipTypes SET MembershipName = 'Pay as You Go' WHERE DiscountRate=0;");
            Sql("UPDATE MembershipTypes SET MembershipName = 'Monthly' WHERE DiscountRate=10;");
            Sql("UPDATE MembershipTypes SET MembershipName = 'Quarterly' WHERE DiscountRate=15;");
            Sql("UPDATE MembershipTypes SET MembershipName = 'Annual' WHERE DiscountRate=20;");
	>> Run DB Update

