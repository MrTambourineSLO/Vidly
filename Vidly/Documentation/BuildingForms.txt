			/*	===		BUILDING FORMS	===	*/
			/*	===		THE MARKUP	===	*/

- > To create a Form to add Customers, 
	>> We need an ACTION that RETURNS a view w/ FORM
- > Customers Controller
	>> prop mvcaction4 New{
		
	}
	Add view
	>> Title = new customer
	>> Now we'll use few HTML helper methods:
	>> Html.BeginForm("NameTargetAction","NameTargetControl")
		>>> In our example Html.BeginForm("Create","Customers")
		BeginForm just begins a form ie <form>
		How Do we render the closing tag???
		>>>BeginForm returns a Disposable object, if we wrap call
		to this function in @using() block - at the end the object
		returned from BeginForm will be disposed
		In Dispose() method it will simply return </form>!!!IMPORTANT!!!
	>> There's a special markup we need to follow to follow modern,responsive forms (BS)
		>>> We wrap each input field in a div w/ class "form-group"
		>>> Inside we need label and input field
		>>> We can use @Html.LabelFor()
			>>>> It accepts lambda that specifies the name of the target property in a model
			ETGO (m => m.Name)
		>>> @Html.TextBoxFor(lambda - again n => n.Name,secondProperty)
			secondProperty -> anonymous object and any properties here will be rendered as html attributes
				eg new {@class = "form-control"} - this is BS class that gives forms modern look and feel
			BEWARE -> Forms accept data annotations on our models an map them to form accordingly
	>> We duplicate the form field for Birthdate
	>> Duplicate again, but insted of TextBoxFor we'll use CheckBoxFor (m => m.IsSubscribedToNewsletter)
	>> Rendering checkboxes w/ BS:
		>>> GetBootstrap.com
		>>> CSS - Forms - We'll see declaration for checkbox and replace it w/ bootstrap ver.
		(It's in it's own group and doesn't require LabelFor') then we delete old form-group for checkbox
		>>> We replace  <input type="checkbox">  with @Html.ChekBoxFor(lambda)
	

			/*	===		LABELS	===	*/	

We can see in our form that name of the label is exactly the same as name of the property
- > To display other tag:
	1) in Customer class - [Display(Name = "Date of Birth")]
		Problem: We have to recompile the code
	2) We can also manually add a label 
		We don't get FOCUS BEHAVIOUS (ie clicking label highlits input)
		Unless we manually add a for="idOfInputField"

			/*	===		DROP-DOWN LISTS	===	*/	

- > Dropdown to select a membership type 
- > in New - get membershipTypes (first we have to add DbSet<MembershipType> in IdentityModels.cs)
	ToList() and pass it to view
- > Since we have to pass both customer and MembershipType objects to view we have to create new VM
	>>	ViewModels - Add New Class -> NewCustomerViewModel
		>>>	Here we need list of membership types - prop (Either List or IEnumerable)
			>>> BEWARE: Since in view we don't need any functionality provided by List (adding,removing...)
			All we need is way to iterate - Which is IEnumerable
			+If we were ever to replace Lsit with other collection it wouldn't be a problem, as long
			as that collection implements IEnumerable as well (this way our code is more loosely coupeled)
		>>> We need also properties of our new Customer
			prop Customer Customer
			In large apps we sometimes how we present entity can be different from how 
			it's defined in domain model.
			For us it's better to use damain as it is.
	>> In New()
		>>> var viewModel = new NewCustomerViewModel{
			MembershipTypes = membershipTypes;}
	Then we pass it to the view
	We change type of model in the view
- > To add a dropdown list:
	>> form-group:
		>> LabelFor (MembershipTypeId)+ insted of TextBoxFor
		>> DropDownListFor (m => m.Customer.MembershipType,)
			>>> Second argument has to be list of items supplied to dropdown
				,new SelectList(Model.MembershipTypes)
				SelectList is one of the types in MVC to init ddl
			>>> Third: name of the property in MembershipTypes class that
			holds the value for each item ("Id")
			>>> Fourth: Property that hold text for each item ("Name")
		>> After SelectList we add third property of "" this will add blank
		item at top of our dropdown list
		(Or we could add "Select Membership Type ")
		>> Last argument is a class as before (form-control)

			/*	===		MODEL BINDING	===	*/	

Form is ready - now bonding & implement saving a customer
-> View - in Form - <button> type="subnit" + few BS classes "btn" "btn-primary" Save
- > Earlier we set name of targetAction to "Create"
-> In Controller
	>> AM Create() [HttpPost] - If actions modify data they should never respond to HTTPGET
	>> It takes NewCustomerViewModel - that's because that's type of model in a view
		EF will automatically map request data to this object!!! - that's called MODEL BINDING
		We can also take argument Customer customer - since all fields in form were prefixed
		with Customer. EF is smart enough to know how to bind those data
		//PS: If we inspect WebPage we can see what data is sent to the server
		by networking traffic
		
			/*	===		SAVING DATA	===	*/

->To add Customer to DB, 1st we need to add it to DbContext
	>> _context.Customers.Add(customer);
		>>>	At this point it isn't written into the DB yet, it's just
		in memory
	>> Each time we modify, add, remove objects (existing or otherwise)
	DbCOntext will mark them as ADDED, MODIFIED or DELETED
	>> To PERSIST changes we need to call SaveChanges() on context
	- At runtime DbC will wrap all changes in transaction and (try to)
	write them in a DB, so either all or none will get persisted.
	>> We need to redirect user to list of customers
	return RedirectToAction("Index","Customers")
